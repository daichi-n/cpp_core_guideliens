C.120: Use class hierarchies to represent concepts with inherent hierarchical structure (only)
(クラス階層は元々階層的な構造を備えているものを表現するためだけに用いる)

C.121: If a base class is used as an interface, make it a pure abstract class
(インターフェースとして使う基底クラスは純粋抽象クラスにする)
C.122: Use abstract classes as interfaces when complete separation of interface and implementation is needed
(インターフェースと実装の分離が必要なら抽象クラスをインターフェースとして使う)

C.160: Define operators primarily to mimic conventional usage
(演算子は慣例的な用法に倣って定義する)
C.161: Use nonmember functions for symmetric operators
(対称な演算子は非メンバー関数として定義する)
C.162: Overload operations that are roughly equivalent
(おおよそ等価な操作はオーバーロードする)
C.164: Avoid implicit conversion operators
(暗黙の変換演算子を避ける)
C.165: Use using for customization points
(カスタマイゼーションポイントにはusingを使う)

C.180: Use unions to save memory(共用体を使ってメモリーを節約する)
→同時に使用されることのないオブジェクトが複数ある場合に、メモリを節約するために使用することができる。
C.181: Avoid "naked" unions(裸の共用体を避ける)
→ネイキッド・ユニオン（naked union）とは、どのメンバにいつでもアクセスできる状態のunionであり、
値を設定しないめんばに対してのアクセスができることでエラーの原因となる。
c++17以降はvariantを使用すること。
C.182: Use anonymous unions to implement tagged unions(無名共用体を使ってタグ付けされた共用体を実装する)
C.183: Don’t use a union for type punning(共用体を型変換のために使わない)
